@function _b_change-map($map, $key, $value) {
  $newMap: map-remove($map, $key);
  $newValue: ($key: $value);
  $newMap: map-merge($newMap, $newValue);
  @return $newMap;
}


@function _b_strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}


@function _b_lead-to-units($number) {
  $units: map-get($sassi-bp, units);

  @if $units == rem {
    $baseFz: _b_get-base-fz();
    $baseFz: _b_strip-unit($baseFz);
    @return _b_strip-unit($number) / $baseFz * 1rem;
  } @else {
    @return _b_strip-unit($number) * 1px;
  }
}


@function _b_is-bp-first($bp) {
  $index: _b_get-bp-index($bp);

  @if $index == 1 {
    @return true;
  }

  @return false;
}


@function _b_is-bp-last($bp) {
  $bpMap: map-get($sassi-bp, bp);
  $index: _b_get-bp-index($bp);

  @if $index == length($bpMap) {
    @return true;
  }

  @return false;
}


@function _b_is-number($number) {
  @if type-of($number) == 'number' {
    @return true;
  }

  @return false;
}


@function _b_parse-px($number) {
  @if not (unit($number) == 'px' or unitless($number)) {
    @error 'Breakpoint must be a number or a value in pixels.';
  }

  @return _b_strip-unit($number);
}


@function _b_check-min-breakpoint($bp) {
  $isDisalow: map-get($sassi-bp, disallow-min-breakpoint);
  @if _b_is-bp-first($bp) and $isDisalow {
    @return true;
  }

  @return false;
}
